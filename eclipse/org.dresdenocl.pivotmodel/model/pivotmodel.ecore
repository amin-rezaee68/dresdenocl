<?xml version="1.0" encoding="UTF-8"?>
<ecore:EPackage xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" xmi:version="2.0" name="pivotmodel" nsURI="http://www.tu-dresden.de/ocl20/pivot/2007/pivotmodel" nsPrefix="dresdenocl">
  <eClassifiers xsi:type="ecore:EClass" name="NamedElement" abstract="true">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p&gt;&#13;&#10;A &lt;code&gt;NamedElement&lt;/code&gt; represents elements that &#13;&#10;may have a name. The name is used for identification of &#13;&#10;the named element within the elements owned by its owner. &#13;&#10;A named element also has a qualified name that allows it to &#13;&#10;be unambiguously identified within a hierarchy of nested &#13;&#10;named elements. &lt;code&gt;NamedElement&lt;/code&gt; is an &#13;&#10;abstract metaclass.&#13;&#10;&lt;/p&gt;"/>
    </eAnnotations>
    <eOperations name="clone" lowerBound="1" eType="#//NamedElement" eExceptions="#//CloneNotSupportedException">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;Creates a copy of this &lt;code&gt;NamedElement&lt;/code&gt;. In the Pivot Model,&#13;&#10;all clone operations are intended to perform deep cloning (as opposed&#13;&#10;to a shallow clone). That means, that all contained elements (i.e., all elements&#13;&#10;for which this &lt;code&gt;NamedElement&lt;/code&gt; is the owner) have to be&#13;&#10;cloned as well. Cloning support is necessary for binding {@link GenericElement}s&#13;&#10;because such an element needs to be cloned first before its {@link TypeParameter}s&#13;&#10;can be bound.&#13;&#10;&lt;/p&gt;"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getQualifiedNameList" unique="false" upperBound="-1" eType="ecore:EDataType datatypes.ecore#//String">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;Returns the name of this {@link NamedElement} as a {@link java.util.List} of {@link java.lang.String}s containing the name of the name spaces and of this {@link NamedElement}.&#13;&#10;&lt;/p&gt;"/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" ordered="false" lowerBound="1" eType="ecore:EDataType datatypes.ecore#//String" defaultValueLiteral="">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;Represents the name of the &lt;code&gt;NamedElement&lt;/code&gt;.&#13;&#10;&lt;/p&gt;"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="qualifiedName" eType="ecore:EDataType datatypes.ecore#//String" changeable="false" volatile="true" transient="true" derived="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;A qualified name allows the &lt;code&gt;NamedElement to be &#13;&#10;identified within a hierarchy of nested elements. It is &#13;&#10;constructed from the names of the owners starting at the &#13;&#10;root of the hierarchy and ending with the name of the &#13;&#10;&lt;code&gt;NamedElement&lt;/code&gt;  itself. This is a derived &#13;&#10;attribute.&#13;&#10;&lt;/p&gt;"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="owner" eType="#//NamedElement" changeable="false" volatile="true" transient="true" resolveProxies="false">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;A &lt;code&gt;NamedElement&lt;/code&gt; may have an owner &#13;&#10;whose name is used for constructing the qualified name of &#13;&#10;the &lt;code&gt;NamedElement&lt;/code&gt;. This is a derived &#13;&#10;attribute.&#13;&#10;&#13;&#10;The concept of an owner was introduced in the Pivot &#13;&#10;Model to facilitate the computation of qualified names &#13;&#10;which are not available in UML::Core::Basic. However, the &#13;&#10;Pivot Model does not extend the concept of a {@link &#13;&#10;Namespace} to {@link Type types} and {@link Operation &#13;&#10;operations} as in the complete UML 2.0 specification. &#13;&#10;That's why arbitrary named elements are not necessarily &#13;&#10;located in a namespace.&#13;&#10;&lt;/p&gt;"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="TypedElement" abstract="true" eSuperTypes="#//NamedElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p&gt;&#13;&#10;A &lt;code&gt;TypedElement&lt;/code&gt; represents elements that &#13;&#10;have a {@link Type}.&#13;&#10;&lt;/p&gt;"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="type" lowerBound="1" eType="#//Type" resolveProxies="false">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;Specifies the type of the element.&#13;&#10;&lt;/p&gt;"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="genericType" eType="#//GenericType" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Feature" abstract="true" eSuperTypes="#//TypedElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p&gt;&#13;&#10;An additional metaclass in comparison with &#13;&#10;UML::Core::Basic, a &lt;code&gt;Feature&lt;/code&gt; introduces &#13;&#10;the notion of a class-scope (i.e. static) feature in a {@link &#13;&#10;Type}.&#13;&#10;&lt;/p&gt;"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="static" eType="ecore:EDataType datatypes.ecore#//Boolean" defaultValueLiteral="false">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;code&gt;&#13;&#10;Specifies whether this feature characterizes individual &#13;&#10;instances classified by a {@link Type} &#13;&#10;(&lt;code&gt;false&lt;/code&gt;) or the type itself &#13;&#10;(&lt;code&gt;true&lt;/code&gt;). Default value is &#13;&#10;&lt;code&gt;false&lt;/code&gt;.&#13;&#10;&lt;/code&gt;"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="semantics" eType="#//Constraint" eOpposite="#//Constraint/definedFeature"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="GenericElement" abstract="true" interface="true" eSuperTypes="#//NamedElement">
    <eOperations name="bindTypeParameter" lowerBound="1" eType="#//NamedElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;Binds the given {@link TypeParameter type parameters} with the given &#13;&#10;{@link Type types}. This means that all references to the type parameters&#13;&#10;(e.g., in properties or operations) will be replaced with the corresponding&#13;&#10;types. The binding will result in a new &lt;code&gt;NamedElement&lt;/code&gt; that&#13;&#10;has some or all of its type parameters bound. The original &lt;code&gt;GenericElement&lt;/code&gt;&#13;&#10;will not be touched. If all type parameters are bound, this operation essentially&#13;&#10; represents an instantiation of a generic type with concrete values for its type&#13;&#10;parameters. &#13;&#10;&lt;/p&gt;&#13;&#10;&#13;&#10;&lt;p&gt;&#13;&#10;The two lists must have the same size and must not contain &lt;code&gt;null&lt;/code&gt;&#13;&#10;elements. The lists may be empty, though. In this case, the binding will still&#13;&#10;work because the &lt;code&gt;GenericElement&lt;/code&gt; may reference&#13;&#10;{@link ComplexGenericType}s that already have {@link TypeArgument}s&#13;&#10;attached to them. These bindings will be performed even if no further&#13;&#10;bindings have been defined via the arguments passed to this method.&#13;&#10;&lt;/p&gt;"/>
      </eAnnotations>
      <eParameters name="parameters" lowerBound="1">
        <eGenericType eClassifier="ecore:EDataType datatypes.ecore#//Sequence">
          <eTypeArguments eClassifier="#//TypeParameter"/>
        </eGenericType>
      </eParameters>
      <eParameters name="types" lowerBound="1">
        <eGenericType eClassifier="ecore:EDataType datatypes.ecore#//Sequence">
          <eTypeArguments>
            <eUpperBound eClassifier="#//Type"/>
          </eTypeArguments>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="addTypeParameter" eType="#//GenericElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;Adds a {@link TypeParameter} to the type parameters of this&#13;&#10;&lt;code&gt;GenericElement&lt;/code&gt;. This operation is required to&#13;&#10;properly support cloning generic elements. The operation returns&#13;&#10;a reference to this &lt;code&gt;GenericElement&lt;/code&gt;.&#13;&#10;&lt;/p&gt;"/>
      </eAnnotations>
      <eParameters name="typeParameter" eType="#//TypeParameter"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="ownedTypeParameter" upperBound="-1" eType="#//TypeParameter" containment="true" eOpposite="#//TypeParameter/genericElement"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ConstrainableElement" abstract="true" interface="true">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p&gt;&#13;&#10;A &lt;code&gt;ConstrainableElement&lt;/code&gt; can be &#13;&#10;constrained by a {@link Constraint}. Depending on the &#13;&#10;concrete type of the constrainable element different forms &#13;&#10;of constraints are possible. A constraint may even define &#13;&#10;the value of a constrainable element, in the form of derived &#13;&#10;values or defined operations.&#13;&#10;&lt;/p&gt;"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Namespace" eSuperTypes="#//NamedElement #//GenericElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p&gt;&#13;&#10;A &lt;code&gt;Namespace&lt;/code&gt; is a container for types and &#13;&#10;other namespaces.&#13;&#10;&lt;/p&gt;"/>
    </eAnnotations>
    <eOperations name="addType" lowerBound="1" eType="#//Namespace">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;Adds a {@link Type} to this &lt;code&gt;Namespace&lt;/code&gt;.&#13;&#10;This is an additional operation in the Pivot Model to support&#13;&#10;cloning namespaces when type parameters are bound.&#13;&#10;The operation returns a reference to this&#13;&#10;&lt;code&gt;Namespace&lt;/code&gt;.&#13;&#10;&lt;/p&gt;"/>
      </eAnnotations>
      <eParameters name="type" eType="#//Type"/>
    </eOperations>
    <eOperations name="addRule" lowerBound="1" eType="#//Namespace">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;Adds a {@link Constraint} to this &lt;code&gt;Namespace&lt;/code&gt;.&#13;&#10;This is an additional operation in the Pivot Model to support&#13;&#10;parsers of constraint languages with a textual syntax (e.g. OCL)&#13;&#10;that allow to specify the context of a constraint without explicitly&#13;&#10;adding the &lt;code&gt;Constraint&lt;/code&gt; instance to the model.&#13;&#10;&lt;/p&gt;"/>
      </eAnnotations>
      <eParameters name="rule" eType="#//Constraint"/>
    </eOperations>
    <eOperations name="addNestedNamespace" lowerBound="1" eType="#//Namespace">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;Adds a nested &lt;code&gt;Namespace&lt;/code&gt; to this &lt;code&gt;Namespace&lt;/code&gt;.&#13;&#10;This is an additional operation in the Pivot Model to support cloning namespaces&#13;&#10;when type parameters are bound. The operation returns a reference to this&#13;&#10;&lt;code&gt;Namespace&lt;/code&gt;.&#13;&#10;&lt;/p&gt;"/>
      </eAnnotations>
      <eParameters name="namespace" eType="#//Namespace"/>
    </eOperations>
    <eOperations name="getOwnedAndNestedRules" upperBound="-1" eType="#//Constraint">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;Returns all {@link Constraint}s that are owned by this or any nested {@link Namespace}.&#13;&#10;&lt;/p&gt;"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="lookupType" eType="#//Type">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;Returns a {@link Type} in this &lt;code&gt;Namespace&lt;/code&gt; with the&#13;&#10;given name.&#13;&#10;&#13;&#10;It is specified as follows:&#13;&#10;&lt;pre&gt;&#13;&#10;context Namespace&#13;&#10;def: lookupType(name : String) : Type =&#13;&#10;   self.ownedType-&gt;any(t | t.name = name)&#13;&#10;&lt;/pre&gt;&#13;&#10;&lt;/p&gt;"/>
      </eAnnotations>
      <eParameters name="name" eType="ecore:EDataType datatypes.ecore#//String"/>
    </eOperations>
    <eOperations name="lookupNamespace" eType="#//Namespace">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;Returns a {@link Namespace} in this &lt;code&gt;Namespace&lt;/code&gt; with the&#13;&#10;given name.&#13;&#10;&#13;&#10;It is specified as follows:&#13;&#10;&lt;pre&gt;&#13;&#10;context Namespace&#13;&#10;def: lookupNamespace(name : String) : Namespace =&#13;&#10;   self.nestedNamespace-&gt;any(ns | ns.name = name)&#13;&#10;&lt;/pre&gt;&#13;&#10;&lt;/p&gt;"/>
      </eAnnotations>
      <eParameters name="name" eType="ecore:EDataType datatypes.ecore#//String"/>
    </eOperations>
    <eOperations name="removeOwnedAndNestedRules" lowerBound="1" eType="ecore:EDataType datatypes.ecore#//Boolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;Removes all {@link Constraint}s that are owned by this or any nested {@link Namespace}.&#13;&#10;&lt;/p&gt;&#13;&#10;&#13;&#10;@return &lt;code&gt;true&lt;/code&gt; if the {@link Constraint}s have been removed."/>
      </eAnnotations>
    </eOperations>
    <eOperations name="removeOwnedAndNestedRules" lowerBound="1" eType="ecore:EDataType datatypes.ecore#//Boolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;Removes all {@link Constraint}s that are owned by this or any nested {@link Namespace} and contained in the given {@link Collection}.&#13;&#10;&lt;/p&gt;&#13;&#10;&#13;&#10;@param constraints The {@link Constraint}s that shall be removed.&#13;&#10;@return &lt;code&gt;true&lt;/code&gt; if the {@link Constraint}s have been removed."/>
      </eAnnotations>
      <eParameters name="constraints" upperBound="-1" eType="#//Constraint"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="ownedType" upperBound="-1" eType="#//Type" containment="true" eOpposite="#//Type/namespace">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;This is the set of {@link Type types} that are contained in this namespace.&#13;&#10;&lt;/p&gt;"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="ownedRule" upperBound="-1" eType="#//Constraint" containment="true" eOpposite="#//Constraint/namespace">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;Specifies a set of {@link Constraint}s owned by this &lt;code&gt;Namespace&lt;/code&gt;.&#13;&#10;&lt;/p&gt;"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="nestedNamespace" upperBound="-1" eType="#//Namespace" containment="true" eOpposite="#//Namespace/nestingNamespace">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;This is the set of namespaces contained in this namespace.&#13;&#10;&lt;/p&gt;"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="nestingNamespace" eType="#//Namespace" resolveProxies="false" eOpposite="#//Namespace/nestedNamespace">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;This specifies the &lt;code&gt;Namespace&lt;/code&gt; that is the &#13;&#10;owner of this namespace.&#13;&#10;&lt;/p&gt;"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Type" eSuperTypes="#//NamedElement #//ConstrainableElement #//GenericElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p&gt;&#13;&#10;A &lt;code&gt;Type&lt;/code&gt; represents a set of values. A {@link TypedElement} that has this type is constrained to represent values within this set. Contrary to &lt;code&gt;Core::Basic::Type&lt;/code&gt;, this is not an abstract metaclass. Instead, the definition of a type in the pivot model is extended to what in many metamodels is called &lt;code&gt;Classifier&lt;/code&gt; or &lt;code&gt;Class&lt;/code&gt;. In particular, a &lt;code&gt;Type&lt;/code&gt; can own {@link Property properties} and {@link Operation operations}. It also may have super types.&#13;&#10;&lt;/p&gt;"/>
    </eAnnotations>
    <eOperations name="conformsTo" eType="ecore:EDataType datatypes.ecore#//Boolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;The query &lt;code&gt;conformsTo()&lt;/code&gt; gives true for a&#13;&#10;type that conforms to another. &#13;&#10;&#13;&#10;It is specified as follows:&#13;&#10;&lt;pre&gt;&#13;&#10;context Type&#13;&#10;def: conformsTo(other: Type): Boolean =&#13;&#10;   (self=other) or (self.allParents()-&gt;includes(other))&#13;&#10;&lt;/pre&gt;&#13;&#10;where the query &lt;code&gt;allParents()&lt;/code&gt; returns all of &#13;&#10;the direct and indirect ancestors of a type and is defined &#13;&#10;as:&#13;&#10;&lt;pre&gt;&#13;&#10;context Type&#13;&#10;def: allParents(): Set(Type) =&#13;&#10;   self.superType-&gt;union(self.superType.allParents())&#13;&#10;&lt;/pre&gt;&#13;&#10;&lt;/p&gt;&#13;&#10;"/>
      </eAnnotations>
      <eParameters name="other" eType="#//Type"/>
    </eOperations>
    <eOperations name="commonSuperType" eType="#//Type">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;The operation &lt;code&gt;commonSuperType&lt;/code&gt; results &#13;&#10;in the most specific common supertype of two {@link Type types}.&#13;&#10;&#13;&#10;It is specified as follows:&#13;&#10;&lt;pre&gt;&#13;&#10;context Type&#13;&#10;def: commonSuperType (other : Type) : Type =&#13;&#10;   Type::allInstances()-&gt;select (cst |&#13;&#10;      other.conformsTo (cst) and&#13;&#10;      self.conformsTo (cst) and&#13;&#10;      not Type::allInstances()-&gt;exists (clst |&#13;&#10;         other.conformsTo (clst) and&#13;&#10;         self.conformsTo (clst) and&#13;&#10;         clst.conformsTo (cst) and&#13;&#10;         clst &lt;&gt; cst&#13;&#10;      )&#13;&#10;   )-&gt;any (true)&#13;&#10;&lt;/pre&gt;&#13;&#10;&lt;/p&gt;"/>
      </eAnnotations>
      <eParameters name="other" eType="#//Type"/>
    </eOperations>
    <eOperations name="allProperties">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;Returns all properties of this &lt;code&gt;Type&lt;/code&gt; and its supertypes.&#13;&#10;&lt;/p&gt;"/>
      </eAnnotations>
      <eGenericType eClassifier="ecore:EDataType datatypes.ecore#//Sequence">
        <eTypeArguments eClassifier="#//Property"/>
      </eGenericType>
    </eOperations>
    <eOperations name="allOperations">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;Returns all operations of this &lt;code&gt;Type&lt;/code&gt; and its supertypes.&#13;&#10;&lt;/p&gt;"/>
      </eAnnotations>
      <eGenericType eClassifier="ecore:EDataType datatypes.ecore#//Sequence">
        <eTypeArguments eClassifier="#//Operation"/>
      </eGenericType>
    </eOperations>
    <eOperations name="lookupProperty" eType="#//Property">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;Returns a {@link Property} of this &lt;code&gt;Type&lt;/code&gt; with the&#13;&#10;given name.&#13;&#10;&#13;&#10;It is specified as follows:&#13;&#10;&lt;pre&gt;&#13;&#10;context Type&#13;&#10;def: lookupProperty(name : String) : Property =&#13;&#10;   self.allProperties()-&gt;any(p | p.name = name)&#13;&#10;&lt;/pre&gt;&#13;&#10;&lt;/p&gt;"/>
      </eAnnotations>
      <eParameters name="name" eType="ecore:EDataType datatypes.ecore#//String"/>
    </eOperations>
    <eOperations name="lookupOperation" eType="#//Operation">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;Returns an {@link Operation} of this &lt;code&gt;Type&lt;/code&gt; with the given name and the given parameter types.&#13;&#10;&#13;&#10;It is specified as follows:&#13;&#10;&lt;pre&gt;&#13;&#10;context Type&#13;&#10;def: lookupOperation (name: String, paramTypes: Sequence(Type)): Operation =&#13;&#10;   self.allOperations()-&gt;any (op | op.name = name and&#13;&#10;      op.hasMatchingSignature(paramTypes))&#13;&#10;&lt;/pre&gt;&#13;&#10;&lt;/p&gt;"/>
      </eAnnotations>
      <eParameters name="name" eType="ecore:EDataType datatypes.ecore#//String"/>
      <eParameters name="paramTypes">
        <eGenericType eClassifier="ecore:EDataType datatypes.ecore#//Sequence">
          <eTypeArguments eClassifier="#//Type"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="addProperty" lowerBound="1" eType="#//Type">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;Adds a {@link Property} to this &lt;code&gt;Type&lt;/code&gt;. This is an additional operation in the Pivot Model to support properties defined via a {@link ConstraintKind#definition definition} constraint.The operation returns a reference to this &lt;code&gt;Type&lt;/code&gt;.&#13;&#10;&lt;/p&gt;"/>
      </eAnnotations>
      <eParameters name="property" eType="#//Property"/>
    </eOperations>
    <eOperations name="addOperation" lowerBound="1" eType="#//Type">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;Adds an {@link Operation} to this &lt;code&gt;Type&lt;/code&gt;. This is an additional operation in the Pivot Model to support operations defined via a {@link ConstraintKind#definition definition} constraint.The operation returns a reference to this &lt;code&gt;Type&lt;/code&gt;.&#13;&#10;&lt;/p&gt;"/>
      </eAnnotations>
      <eParameters name="operation" eType="#//Operation"/>
    </eOperations>
    <eOperations name="addSuperType" lowerBound="1" eType="#//Type">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;Adds a {@link Type} to the supertypes of this &lt;code&gt;Type&lt;/code&gt;.&#13;&#10;This is an additional operation in the Pivot Model to support adding&#13;&#10;the OclAny type as a supertype. We cannot simply add it to the list&#13;&#10;returned by {@link #getSuperType()} because subclasses may&#13;&#10;override the behaviour of that list to adapt to custom repositories.&#13;&#10;The operation returns a reference to this &lt;code&gt;Type&lt;/code&gt;.&#13;&#10;&lt;/p&gt;"/>
      </eAnnotations>
      <eParameters name="type" eType="#//Type"/>
    </eOperations>
    <eOperations name="removeProperty" lowerBound="1" eType="ecore:EDataType datatypes.ecore#//Boolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;Removes a {@link Property} from this &lt;code&gt;Type&lt;/code&gt;. This is an additional operation in the Pivot Model to support removal of properties defined via a {@link ConstraintKind#definition definition} constraint. The operation returns a &lt;code&gt;boolean&lt;/code&gt; indicating whether or not the {@link Property} has been removed successfully.&#13;&#10;&lt;/p&gt;"/>
      </eAnnotations>
      <eParameters name="property" eType="#//Property"/>
    </eOperations>
    <eOperations name="removeOperation" lowerBound="1" eType="ecore:EDataType datatypes.ecore#//Boolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;Removes an {@link Operation} from this &lt;code&gt;Type&lt;/code&gt;. This is an additional operation in the Pivot Model to support removal of operations defined via a {@link ConstraintKind#definition definition} constraint. The operation returns a &lt;code&gt;boolean&lt;/code&gt; indicating whether or not the {@link Operation} has been removed successfully.&#13;&#10;&lt;/p&gt;"/>
      </eAnnotations>
      <eParameters name="operation" eType="#//Operation"/>
    </eOperations>
    <eOperations name="getIDProperties" upperBound="-1" eType="#//Property">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;Returns all properties which identify this &lt;code&gt;Type&lt;/code&gt;. If no identifier property specify than an empty list will be return.&#13;&#10;&lt;/p&gt;"/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="namespace" eType="#//Namespace" transient="true" eOpposite="#//Namespace/ownedType">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;References the {@link Namespace} that contains this &lt;code&gt;Type&lt;/code&gt;.&#13;&#10;&lt;/p&gt;"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="ownedOperation" upperBound="-1" eType="#//Operation" containment="true" resolveProxies="false" eOpposite="#//Operation/owningType">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;References the {@link Operation operations} owned by this &lt;code&gt;Type&lt;/code&gt;. This is an ordered association.&#13;&#10;&lt;/p&gt;"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="ownedProperty" upperBound="-1" eType="#//Property" containment="true" resolveProxies="false" eOpposite="#//Property/owningType">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;References the {@link Property properties} owned by this &lt;code&gt;Type&lt;/code&gt;. This is an ordered association.&#13;&#10;&lt;/p&gt;"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="superType" upperBound="-1" eType="#//Type" resolveProxies="false">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;References the immediate supertypes of a &#13;&#10;&lt;code&gt;Type&lt;/code&gt;, from which the type inherits.&#13;&#10;&lt;/p&gt;"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="genericSuperType" upperBound="-1" eType="#//GenericType" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="PrimitiveType" eSuperTypes="#//Type">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p&gt;&#13;&#10;A &lt;code&gt;PrimitiveType&lt;/code&gt; defines a predefined data &#13;&#10;type, without any relevant substructure (i.e., it has no parts). &#13;&#10;A primitive datatype may have an algebra and operations &#13;&#10;defined outside of the Pivot Model, for example, &#13;&#10;mathematically.&#13;&#10;&lt;/p&gt;"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="kind" lowerBound="1" eType="#//PrimitiveTypeKind" defaultValueLiteral="Unknown">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;Specifies the {@link PrimitiveTypeKind kind} of this &lt;code&gt;PrimitiveType&lt;/code&gt;.&#13;&#10;Different DSLs may have different predefined primitive types, but it should be&#13;&#10;possible to classify them according to the literals defined in the Pivot Model.&#13;&#10;&lt;/p&gt;"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EEnum" name="PrimitiveTypeKind">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p&gt;&#13;&#10;An enumeration that defines literals for the predefined kinds of {@link PrimitiveType}s.&#13;&#10;&lt;/p&gt;"/>
    </eAnnotations>
    <eLiterals name="Unknown"/>
    <eLiterals name="Integer" value="1"/>
    <eLiterals name="Real" value="2"/>
    <eLiterals name="Boolean" value="3"/>
    <eLiterals name="String" value="4"/>
    <eLiterals name="Void" value="5"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Enumeration" eSuperTypes="#//Type">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p&gt;&#13;&#10;An &lt;code&gt;Enumeration&lt;/code&gt; defines a set of &#13;&#10;{@link EnumerationLiteral literals} that can be used as its &#13;&#10;values.&#13;&#10;&lt;/p&gt;"/>
    </eAnnotations>
    <eOperations name="addLiteral" lowerBound="1" eType="#//Enumeration">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;Adds an {@link EnumerationLiteral} to this &lt;code&gt;Enumeration&lt;/code&gt;.&#13;&#10;This operation is required to properly support cloning enumerations.&#13;&#10;The operation returns a reference to this &lt;code&gt;Enumeration&lt;/code&gt;.&#13;&#10;&lt;/p&gt;"/>
      </eAnnotations>
      <eParameters name="literal" lowerBound="1" eType="#//EnumerationLiteral"/>
    </eOperations>
    <eOperations name="lookupLiteral" eType="#//EnumerationLiteral">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;Returns an {@link EnumerationLiteral} of this &lt;code&gt;Enumeration&lt;/code&gt;&#13;&#10;with the given name.&#13;&#10;&#13;&#10;It is specified as follows:&#13;&#10;&lt;pre&gt;&#13;&#10;context Enumeration&#13;&#10;def: lookupLiteral(name : String) : EnumerationLiteral =&#13;&#10;   self.ownedLiteral-&gt;any(l | l.name = name)&#13;&#10;&lt;/pre&gt;&#13;&#10;&lt;/p&gt;"/>
      </eAnnotations>
      <eParameters name="name" eType="ecore:EDataType datatypes.ecore#//String"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="ownedLiteral" upperBound="-1" eType="#//EnumerationLiteral" containment="true" eOpposite="#//EnumerationLiteral/enumeration">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;This is the ordered collection of literals for the enumeration.&#13;&#10;&lt;/p&gt;"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="EnumerationLiteral" eSuperTypes="#//NamedElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p&gt;&#13;&#10;An &lt;code&gt;EnumerationLiteral&lt;/code&gt; is a value of an &#13;&#10;{@link Enumeration}.&#13;&#10;&lt;/p&gt;"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="enumeration" eType="#//Enumeration" transient="true" eOpposite="#//Enumeration/ownedLiteral">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;The enumeration that this literal belongs to.&#13;&#10;&lt;/p&gt;"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Property" eSuperTypes="#//Feature #//TypedElement #//NamedElement #//ConstrainableElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p&gt;&#13;&#10;A &lt;code&gt;Property&lt;/code&gt; is a {@link TypedElement} &#13;&#10;typed element that represents an attribute of a {@link &#13;&#10;Type} or an association to another type.&#13;&#10;&lt;/p&gt;"/>
    </eAnnotations>
    <eOperations name="cmpSlots" eType="ecore:EDataType datatypes.ecore#//Boolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;The operation cmpSlots returns true if the compared &#13;&#10;property has identical name and type.&#13;&#10;&#13;&#10;It is specified as follows:&#13;&#10;&lt;pre&gt;&#13;&#10;context Parameter::cmpSlots(p : Property): Boolean =&#13;&#10;   p.name = self.name and p.type = self.type&#13;&#10;&lt;/pre&gt;&#13;&#10;&lt;/p&gt;"/>
      </eAnnotations>
      <eParameters name="p" eType="#//Property"/>
    </eOperations>
    <eOperations name="isIdentifier" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;If the &lt;code&gt;Property&lt;/code&gt; is an part of unique identifier of the owning type th return value is true&#13;&#10;The default value is false.&#13;&#10;&lt;/p&gt;"/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="owningType" eType="#//Type" transient="true" eOpposite="#//Type/ownedProperty">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;Specifies the owner of this &lt;code&gt;Property&lt;/code&gt;.&#13;&#10;&lt;/p&gt;"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Operation" eSuperTypes="#//Feature #//TypedElement #//NamedElement #//ConstrainableElement #//GenericElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p&gt;&#13;&#10;An operation is a behavioral feature of a {@link Type} that &#13;&#10;specifies the name, type, parameters, and constraints for &#13;&#10;invoking an associated behavior.&#13;&#10;&lt;/p&gt;"/>
    </eAnnotations>
    <eOperations name="hasMatchingSignature" eType="ecore:EDataType datatypes.ecore#//Boolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;An additional operation defined in the OCL specification &#13;&#10;(Section 8.3.8) which checks whether the &#13;&#10;&lt;code&gt;Operation&lt;/code&gt;'s signature matches with a &#13;&#10;sequence of {@link Type types}. Note that in making the &#13;&#10;match only parameters with {@link ParameterDirectionKind &#13;&#10;direction kind} &lt;code&gt;in&lt;/code&gt; or &lt;code&gt;inout&lt;/code&gt;&#13;&#10;are considered.&#13;&#10;&#13;&#10;The operation is specified as follows:&#13;&#10;&lt;pre&gt;&#13;&#10;context Operation&#13;&#10;def: hasMatchingSignature(paramTypes: Sequence(Type)) : Boolean =&#13;&#10;   let sigParamTypes: Sequence(Type) =&#13;&#10;      self.inParameter.union(self.inoutParameter).type in&#13;&#10;   (&#13;&#10;      ( sigParamTypes-&gt;size() = paramTypes-&gt;size() ) and&#13;&#10;      ( Set{1..paramTypes-&gt;size()}-&gt;forAll ( i |&#13;&#10;         paramTypes-&gt;at(i).conformsTo(sigParamTypes-&gt;at(i)) )&#13;&#10;      )&#13;&#10;   )&#13;&#10;&lt;/pre&gt;&#13;&#10;&lt;/p&gt;"/>
      </eAnnotations>
      <eParameters name="paramTypes">
        <eGenericType eClassifier="ecore:EDataType datatypes.ecore#//Sequence">
          <eTypeArguments eClassifier="#//Type"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="addParameter" eType="#//Operation">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;Adds a {@link Parameter} to this operation. This is required &#13;&#10;to define new operations via a {@link ConstraintKind#definition definition} constraint.&#13;&#10;The operation returns a reference to this &lt;code&gt;Operation&lt;/code&gt;.&#13;&#10;&lt;/p&gt;"/>
      </eAnnotations>
      <eParameters name="param" eType="#//Parameter"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="owningType" eType="#//Type" transient="true" eOpposite="#//Type/ownedOperation">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;Specifies the owner of this &lt;code&gt;Operation&lt;/code&gt;.&#13;&#10;&lt;/p&gt;"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="ownedParameter" upperBound="-1" eType="#//Parameter" containment="true" eOpposite="#//Parameter/operation">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;Specifies the {@link Parameter parameters} owned by this &lt;code&gt;Operation&lt;/code&gt;.&#13;&#10;&lt;/p&gt;"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="inputParameter" upperBound="-1" eType="#//Parameter" changeable="false" volatile="true" transient="true" resolveProxies="false">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;This is the subset of all parameters with direction {@link ParameterDirectionKind#IN in} or {@link ParameterDirectionKind#INOUT inout}.&#13;&#10;&lt;/p&gt;"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="outputParameter" upperBound="-1" eType="#//Parameter" changeable="false" volatile="true" transient="true" resolveProxies="false">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;This is the subset of all parameters with direction {@link ParameterDirectionKind#OUT out} or {@link ParameterDirectionKind#INOUT inout}.&#13;&#10;&lt;/p&gt;"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="returnParameter" eType="#//Parameter" changeable="false" volatile="true" transient="true" resolveProxies="false">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;References the return parameter of this &lt;code&gt;Operation&lt;/code&gt;, if existent.&#13;&#10;&lt;/p&gt;"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="signatureParameter" upperBound="-1" eType="#//Parameter" changeable="false" volatile="true" transient="true" resolveProxies="false">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;This is the subset of all parameters except the&#13;&#10;{@link ParameterDirectionKind#RETURN return}&#13;&#10;parameter.&#13;&#10;&lt;/p&gt;"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Parameter" eSuperTypes="#//TypedElement #//NamedElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p&gt;&#13;&#10;A &lt;code&gt;Parameter&lt;/code&gt; is a specification of an argument used to pass information into or out of an invocation of an {@link Operation}.&#13;&#10;&lt;/p&gt;"/>
    </eAnnotations>
    <eOperations name="asProperty" eType="#//Property">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;This is an additional operation defined in the OCL specification (Section 8.3.8). It results in a {@link Property} that has the same name, type, etc. as the parameter. This is necessary, for instance, to create tuple types from the out parameters of an {@link Operation}.&#13;&#10;&#13;&#10;The operation is specified as:&#13;&#10;&lt;pre&gt;&#13;&#10;context Parameter::asProperty(): Property&#13;&#10;   pre: -- none&#13;&#10;   post: result.name = self.name&#13;&#10;   post: result.type = self.type&#13;&#10;   post: result.isOrdered = self.isOrdered&#13;&#10;   post: result.isMultiple = self.isMultiple&#13;&#10;   post: result.isUnique = self.isUnique&#13;&#10;   post: result.isStatic = false&#13;&#10;&lt;/pre&gt;&#13;&#10;&lt;/p&gt;"/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="kind" eType="#//ParameterDirectionKind" defaultValueLiteral="in">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;Specifies the {@link ParameterDirectionKind direction kind} of this &lt;code&gt;Parameter&lt;/code&gt;.&#13;&#10;&lt;/p&gt;"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="operation" eType="#//Operation" transient="true" eOpposite="#//Operation/ownedParameter">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;References the {@link Operation} for which this is a formal parameter.&#13;&#10;&lt;/p&gt;"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EEnum" name="ParameterDirectionKind">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p&gt;&#13;&#10;An enumeration type that defines literals used to specify direction of {@link Parameter parameters}.&#13;&#10;&lt;/p&gt;"/>
    </eAnnotations>
    <eLiterals name="in">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;Indicates that parameter values are passed into the &#13;&#10;{@link Operation} by the caller.&#13;&#10;&lt;/p&gt;"/>
      </eAnnotations>
    </eLiterals>
    <eLiterals name="out" value="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;Indicates that parameter values are passed from an &#13;&#10;{@link Operation} out to the caller.&#13;&#10;&lt;/p&gt;"/>
      </eAnnotations>
    </eLiterals>
    <eLiterals name="inout" value="2">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;Indicates that parameter values are passed into an {@link &#13;&#10;Operation} by the caller and then back out to&#13;&#10;the caller from the {@link Operation}.&#13;&#10;&lt;/p&gt;"/>
      </eAnnotations>
    </eLiterals>
    <eLiterals name="return" value="3">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;Indicates that parameter values are passed as return&#13;&#10;values from an {@link Operation} back to the caller.&#13;&#10;&lt;/p&gt;"/>
      </eAnnotations>
    </eLiterals>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="GenericType" abstract="true" eSuperTypes="#//NamedElement">
    <eOperations name="bindGenericType" lowerBound="1" eType="ecore:EDataType datatypes.ecore#//Boolean">
      <eParameters name="parameters" lowerBound="1">
        <eGenericType eClassifier="ecore:EDataType datatypes.ecore#//Sequence">
          <eTypeArguments eClassifier="#//TypeParameter"/>
        </eGenericType>
      </eParameters>
      <eParameters name="types" lowerBound="1">
        <eGenericType eClassifier="ecore:EDataType datatypes.ecore#//Sequence">
          <eTypeArguments>
            <eUpperBound eClassifier="#//Type"/>
          </eTypeArguments>
        </eGenericType>
      </eParameters>
      <eParameters name="typedElement" eType="#//TypedElement"/>
    </eOperations>
    <eOperations name="bindGenericSuperType" eType="ecore:EDataType datatypes.ecore#//Boolean">
      <eParameters name="parameters" lowerBound="1">
        <eGenericType eClassifier="ecore:EDataType datatypes.ecore#//Sequence">
          <eTypeArguments eClassifier="#//TypeParameter"/>
        </eGenericType>
      </eParameters>
      <eParameters name="types" lowerBound="1">
        <eGenericType eClassifier="ecore:EDataType datatypes.ecore#//Sequence">
          <eTypeArguments>
            <eUpperBound eClassifier="#//Type"/>
          </eTypeArguments>
        </eGenericType>
      </eParameters>
      <eParameters name="subType" eType="#//Type"/>
    </eOperations>
    <eOperations name="isConformant" eType="ecore:EDataType datatypes.ecore#//Boolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;Returns &lt;code&gt;true&lt;/code&gt; if the given type conforms to this&#13;&#10;&lt;code&gt;GenericType&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise.&#13;&#10;&lt;/p&gt;"/>
      </eAnnotations>
      <eParameters name="type" eType="#//Type"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ParameterGenericType" eSuperTypes="#//GenericType">
    <eStructuralFeatures xsi:type="ecore:EReference" name="typeParameter" eType="#//TypeParameter" resolveProxies="false"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ComplexGenericType" eSuperTypes="#//GenericType">
    <eOperations name="addTypeArgument" eType="#//ComplexGenericType">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;Adds a {@link TypeArgument} to this &lt;code&gt;ComplexGenericType&lt;/code&gt;.&#13;&#10;This operation is required to properly support cloning complex generic types.&#13;&#10;The operation returns a reference to this &lt;code&gt;ComplexGenericType&lt;/code&gt;.&#13;&#10;&lt;/p&gt;"/>
      </eAnnotations>
      <eParameters name="typeArgument" lowerBound="1" eType="#//TypeArgument"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="unboundType" eType="#//Type" resolveProxies="false"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="typeArgument" upperBound="-1" eType="#//TypeArgument" containment="true" resolveProxies="false" eOpposite="#//TypeArgument/owningGenericType"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="TypeParameter" eSuperTypes="#//NamedElement">
    <eStructuralFeatures xsi:type="ecore:EReference" name="genericElement" eType="#//GenericElement" resolveProxies="false" eOpposite="#//GenericElement/ownedTypeParameter"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="TypeArgument" eSuperTypes="#//TypedElement">
    <eStructuralFeatures xsi:type="ecore:EReference" name="owningGenericType" eType="#//ComplexGenericType" eOpposite="#//ComplexGenericType/typeArgument"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Constraint" eSuperTypes="#//NamedElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p&gt;&#13;&#10;A &lt;code&gt;Constraint&lt;/code&gt; is a condition or restriction &#13;&#10;expressed in natural language text or in a machine readable &#13;&#10;language for the purpose of declaring some of the &#13;&#10;semantics of an element. The semantics are specified via &#13;&#10;an associated {@link Expression}.&#13;&#10;&lt;/p&gt;"/>
    </eAnnotations>
    <eOperations name="addConstrainedElement" lowerBound="1" eType="#//Constraint">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;Adds a {@link ConstrainableElement} to the constrained elements of&#13;&#10;this &lt;code&gt;Constraint&lt;/code&gt;. This operation is required to properly&#13;&#10;support cloning constraints. The operation returns a reference to this&#13;&#10;&lt;code&gt;Constraint&lt;/code&gt;.&#13;&#10;&lt;/p&gt;"/>
      </eAnnotations>
      <eParameters name="constrainedElement" lowerBound="1" eType="#//ConstrainableElement"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="kind" lowerBound="1" eType="#//ConstraintKind">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;This attribute determines the semantics of a constraint in &#13;&#10;relation to its {@link #getConstrainedElement() constrained &#13;&#10;elements}.&#13;&#10;&lt;/p&gt;"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="namespace" eType="#//Namespace" transient="true" eOpposite="#//Namespace/ownedRule">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;This is the {@link Namespace} this constraint is contained &#13;&#10;in. Essentially, this is just a way of placing the constraint &#13;&#10;somewhere in the model that it is part of. Contrary to the &#13;&#10;UML specification, the namespace of a constraint need&#13;&#10;not to be the context where the constraint is evaluated.&#13;&#10;This is mainly due to the different notion of a namespace&#13;&#10;in the Pivot Model, i.e. a {@link Type} is not a namespace.&#13;&#10;&lt;/p&gt;"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="specification" lowerBound="1" eType="#//Expression" containment="true" eOpposite="#//Expression/constraint">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;This is the specification of the constraint as an {@link &#13;&#10;Expression} in a human- or machine-readable language.&#13;&#10;&lt;/p&gt;"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="constrainedElement" upperBound="-1" eType="#//ConstrainableElement" resolveProxies="false">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;This is the ordered set of {@link ConstrainableElement}s &#13;&#10;referenced by this Constraint.&#13;&#10;&lt;/p&gt;"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="definedFeature" eType="#//Feature" resolveProxies="false" eOpposite="#//Feature/semantics">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;References the defined feature of a {@link &#13;&#10;ConstraintKind#DEFINITION} constraint.&#13;&#10;&lt;/p&gt;"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EEnum" name="ConstraintKind">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p&gt;&#13;&#10;A &lt;code&gt;ConstraintKind&lt;/code&gt; determines the semantics &#13;&#10;of a {@link Constraint}.&#13;&#10;&lt;/p&gt;"/>
    </eAnnotations>
    <eLiterals name="invariant">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;An invariant constraint is linked to a {@link Type}. It &#13;&#10;specifies invariants for the type, i.e. boolean conditions that &#13;&#10;must be true upon completion of every public operation, but &#13;&#10;not necessarily during the execution of operations.&#13;&#10;&lt;/p&gt;"/>
      </eAnnotations>
    </eLiterals>
    <eLiterals name="definition" value="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;A definition constraint is linked to a {@link Type} and is &#13;&#10;used to define {@link Property properties} or {@link &#13;&#10;Operation operations} for that type. Defining a property or &#13;&#10;operation this way means that every instance of the type &#13;&#10;holds a property or operation that conforms to the given &#13;&#10;definition.&#13;&#10;&lt;/p&gt;"/>
      </eAnnotations>
    </eLiterals>
    <eLiterals name="precondition" value="2">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;A precondition is a boolean expression that must be true at &#13;&#10;the moment when an {@link Operation} starts its execution;&#13;&#10;otherwise, the operation will not be executed.&#13;&#10;&lt;/p&gt;"/>
      </eAnnotations>
    </eLiterals>
    <eLiterals name="postcondition" value="3">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;A postcondition is a boolean expression that must be true at &#13;&#10;the moment when an {@link Operation} ends its execution; &#13;&#10;otherwise, the operation has not executed correctly.&#13;&#10;&lt;/p&gt;"/>
      </eAnnotations>
    </eLiterals>
    <eLiterals name="initial" value="4">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;A constraint with the kind &lt;em&gt;initial&lt;/em&gt; specifies the &#13;&#10;value of a {@link Property} at the moment an instance of a &#13;&#10;{@link Type} is created.&#13;&#10;&lt;/p&gt;"/>
      </eAnnotations>
    </eLiterals>
    <eLiterals name="derived" value="5">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;A derivation rule specifies that the value of a {@link &#13;&#10;Property} should always be equal to the value given by the &#13;&#10;constraint expression.&#13;&#10;&lt;/p&gt;"/>
      </eAnnotations>
    </eLiterals>
    <eLiterals name="body" value="6">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;An {@link Operation} can be fully defined by specifying the &#13;&#10;result of the operation in a single expression. Commonly, &#13;&#10;operations specified using a body constraint do not have &#13;&#10;side effects; i.e. they are pure query operations returning a &#13;&#10;value or a set of values.&#13;&#10;&lt;/p&gt;"/>
      </eAnnotations>
    </eLiterals>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Expression">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p&gt;&#13;&#10;An &lt;code&gt;Expression&lt;/code&gt; contains a language-&#13;&#10;specific text string used to describe a value or values, and &#13;&#10;an optional specification of the language. One predefined &#13;&#10;language for specifying expressions is OCL. Natural &#13;&#10;language or programming languages may also be&#13;&#10;used.&#13;&#10;Contrary to the UML specification, the Pivot Model only &#13;&#10;permits one body string for each expression. This is &#13;&#10;because the Pivot Model has been designed with an OCL&#13;&#10;integration in mind.&#13;&#10;&lt;/p&gt;"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="body" eType="ecore:EDataType datatypes.ecore#//String">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;This is the uninterpreted text of the expression.&#13;&#10;&lt;/p&gt;"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="language" eType="ecore:EDataType datatypes.ecore#//String">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;The language the expression is written in. &#13;&#10;&lt;/p&gt;"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="constraint" eType="#//Constraint" transient="true" eOpposite="#//Constraint/specification"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EDataType" name="CloneNotSupportedException" instanceClassName="java.lang.CloneNotSupportedException" serializable="false"/>
  <eClassifiers xsi:type="ecore:EClass" name="AssociationProperty" eSuperTypes="#//Property">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p&gt;&#13;&#10;A &lt;code&gt;Association&lt;/code&gt; is a {@link Property} &#13;&#10;typed element that represents an bidirectional association to another type.&#13;&#10;&lt;/p&gt;"/>
    </eAnnotations>
    <eOperations name="addAssociation">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;The operation addAssociation added a &lt;code&gt; NDirectionalAssociation&lt;/code&gt; to the inverse association list.&#13;&#10;&lt;/p&gt;"/>
      </eAnnotations>
      <eParameters name="bProperty" eType="#//AssociationProperty"/>
    </eOperations>
    <eOperations name="getAssociation" eType="#//AssociationProperty">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;The operation removeAssociation removed a &lt;code&gt;NDirectionalAssociation&lt;/code&gt; from the inverse association list.&#13;&#10;&lt;/p&gt;"/>
      </eAnnotations>
      <eParameters name="propName" eType="ecore:EDataType datatypes.ecore#//String"/>
    </eOperations>
    <eOperations name="removeAssociation">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;The operation removeAssociation removed a &lt;code&gt;NDirectionalAssociation&lt;/code&gt; from the inverse association list.&#13;&#10;&lt;/p&gt;"/>
      </eAnnotations>
      <eParameters name="bProperty" eType="#//AssociationProperty"/>
    </eOperations>
    <eOperations name="isInverseAssociation" eType="ecore:EDataType datatypes.ecore#//Boolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;The operation isInverseAssociation ckecked a &lt;code&gt;NDirectionalAssociation&lt;/code&gt; is in the inverse association list.&#13;&#10;&lt;/p&gt;"/>
      </eAnnotations>
      <eParameters name="bProperty" eType="#//AssociationProperty"/>
    </eOperations>
    <eOperations name="addAssociations">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p&gt;&#13;&#10;The operation addAssociation added a &lt;code&gt;NDirectionalAssociation&lt;/code&gt; to the inverse association list.&#13;&#10;&lt;/p&gt;"/>
      </eAnnotations>
      <eParameters name="bProperty" upperBound="-1" eType="#//AssociationProperty"/>
    </eOperations>
    <eOperations name="isNavigable" eType="ecore:EDataType datatypes.ecore#//Boolean"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="inverseAssociationProperties" upperBound="-1" eType="#//AssociationProperty" containment="true"/>
  </eClassifiers>
</ecore:EPackage>
